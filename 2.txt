#if !defined(__ALIGNER__)
>>>>>>> new
#define __ALIGNER__

#include "alignbase.h"
#include "WRImage.hpp"
#include "AlgoConfig.h"
#include "ClassFactory.h"
#include "log.hpp"
#include <string>

>>>>>>> new
//no memory handling
//init and uninit not necessary
class Aligner
{
public:
<<<<<<< HEAD
    Aligner();
    ~Aligner();

public:
    void Init();
    void UnInit();
    void configure();
    void doAlign(WRMat& ref0, WRMat& test);
    void doGlobalAlign(WRMat& ref0, WRMat& test);
    void getResult(float& x, float& y, float& s) { x=mX; y=mY; s= mScore;};
private:
    double getLength(IppiPoint a, IppiPoint b);
    void mulPointsMedian(std::multimap<float, IppiPoint> refShift, std::vector<IppiPoint> landMarkPoints);
    void landMarkShift(WRMat &ref, WRMat &test, std::vector<IppiPoint> position);
    IppiPoint finalShift(std::vector<IppiPoint> pos, IppiPoint center, IppiPoint& finalPt);
    IppStatus findCandidate(WRMat& map, Ipp32f thresh, std::vector<IppiPoint>& position);

private:
    LandMarkSelection* mLmSelect;
    AlignBase* mAligner;
    TemplateModel mTmpModel;
    bool isMarkSelected;
    float mX, mY, mScore;
    std::string mTemplate, mGlobalAlign, mFilterMethod;
    int mSerchRange, mFilterSize;
    std::vector<IppiPoint> landMarkPoints, position;
    std::multimap<float, IppiPoint> refShift;
    Aligner() { mX = 0.0f; mY = 0.0f; mScore = 0.0f;};
    ~Aligner() {};

public:
    void configure();
    void doAlign(WRMat& ref0, WRMat& test);
    void getResult(float& x, float& y, float& s) { x=mX; y=mY; s= mScore;};

private:
    AlignBase* mAligner;
    float mX, mY, mScore;
    std::string mTemplate, mFilterMethod;
    int mSerchRange, mFilterSize;
>>>>>>> new
};

#endif //!defined(__ALIGNER__)
